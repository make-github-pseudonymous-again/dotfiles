#!/usr/bin/env bash

if [ "$(id -u)" = 0 ] ; then
  echo 'must NOT be run as root'
  exit 1
fi

DOTFILES="$(dirname "$(dirname "${BASH_SOURCE[0]}")")";

mapfile -t packages < <(sed -e 's/\s*#.*$//g' -e '/^$/d' "$DOTFILES"/bootstrap/packages/node | sort)

_sudo () {
  sudo PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=1 "$@"
}

if false; then
#if command -v yarn 1>/dev/null; then

  echo "  # using yarn"

  mapfile -t yarn_installed < <(jq -r '.dependencies | keys[]' /usr/local/share/.config/yarn/global/package.json 2>/dev/null | sort)

  function _install {
    mapfile -t to_install < <(comm -23 <(printf '%s\n' "${packages[@]}") <(printf '%s\n' "${yarn_installed[@]}"))
    if [ ${#to_install[@]} -eq 0 ]; then
      echo "  > nothing to install"
    else
      echo "  > installing ~ ${to_install[*]}"
      _sudo yarn global add "${to_install[@]}"
    fi
  }

  function _update {
    echo "  - upgrade global packages"
    _sudo yarn global upgrade --latest || exit "$?"
  }

elif command -v npm 1>/dev/null; then

  echo "  # using npm"

  npm_root="$(npm root -g)"
  # shellcheck disable=SC2001
  mapfile -t all_installed < <(find "$npm_root" -maxdepth "$(<<< "$npm_root" sed 's:/: :g' | wc -w)" -name package.json | cut -d/ -f5- | sed -e 's:/package.json$::' -e '/^[^@].*\//d' | sort)
  mapfile -t pacman_installed < <(printf '%s\n' "${all_installed[@]}" | pacman -Qk - 2>/dev/null | cut -d: -f1 | sort)
  mapfile -t npm_installed < <(comm -23 <(printf '%s\n' "${all_installed[@]}") <(printf '%s\n' "${pacman_installed[@]}"))

  function _install {
    echo "   - install global packages"
    mapfile -t to_install < <(comm -23 <(printf '%s\n' "${packages[@]}") <(printf '%s\n' "${all_installed[@]}"))
    if [ ${#to_install[@]} -eq 0 ]; then
      echo "   > nothing to install"
    else
      echo "   > installing ~ ${to_install[*]}"
      _sudo npm install -g "${to_install[@]}" || exit "$?"
    fi
  }

  function _update {
    echo "  - update global packages"
    mapfile -t ncu_versions < <(ncu -g --reject "${pacman_installed[*]}" | grep '^npm -g install ' | cut -d' ' -f4- | tr ' ' '\n')
    if [ ${#ncu_versions[@]} -eq 0 ]; then
      echo "   > nothing to update"
    else
      # We check that ncu plays nice
      mapfile -t ncu_packages < <(printf '%s\n' "${ncu_versions[@]}" | rev | cut -d@ -f2- | rev | sort)
      mapfile -t ncu_illegal < <(comm -23 <(printf '%s\n' "${ncu_packages[@]}") <(printf '%s\n' "${npm_installed[@]}"))
      if [ "${#ncu_illegal[@]}" -ne 0 ] ; then
        echo "   ! found packages that were never installed in ncu's output ~ ${ncu_illegal[*]}"
        exit 123
      else
        echo "   > updating ~ ${ncu_versions[*]}"
        _sudo npm install -g "${ncu_versions[@]}" || exit "$?"
      fi
    fi
  }

else
  echo 'yarn or npm is not installed, install one via pacman first'
  exit 2
fi

x="${1:-i}"

if [ "$x" = i ] ; then
  _install
elif [ "$x" = u ] ; then
  _update
else
  echo "Option $x is not valid."
  exit 3
fi
