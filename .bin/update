#!/usr/bin/env bash

if [ "$(id -u)" = 0 ] ; then
  echo '! must NOT be run as root'
  exit 57
fi

echo '+ Parsing arguments'

### PARSING BEGIN ###

# A POSIX variable
OPTIND=1         # Reset in case getopts has been used previously in the shell.

# Initialize our own variables:
clean=false    # c
diff=false     # d
pacdiff=false  # f
install=false  # i
modules=false  # m
node=true      # n
pull=false     # p
restart=false  # r
sync=false     # s
tldr=false     # t
update=true    # u
vim=false      # v
_wait=false    # w
plugins=false  # x
pip=true       # y
fish=false     # z

function show_help ( ) {
  echo '! No help for the moment :(' ;
  echo ' > Here is the code of the update script. The file is located at '"${BASH_SOURCE[0]}".
  if command -v bat > /dev/null ; then
    bat "${BASH_SOURCE[0]}"
  elif command -v less > /dev/null ; then
    less "${BASH_SOURCE[0]}"
  else
    cat "${BASH_SOURCE[0]}"
  fi
}

while getopts "h?abcdfimnprstuvwxyzCDFIMNPRSTUVWXYZ" opt; do
    case "$opt" in
    h|\?)
        show_help
        exit 0
        ;;
    a)  pull=true
        modules=true
        plugins=true
        clean=true
        sync=true
        pacdiff=true
        install=true
        update=true
        restart=true
        vim=true
        fish=true
        tldr=true
        ;;
    b)  pull=true
        modules=true
        plugins=true
        update=true
        vim=true
        fish=true
        tldr=true
        ;;
    c)  clean=true
        ;;
    d)  diff=true
        update=false
        ;;
    f)  pacdiff=true
        ;;
    i)  install=true
        ;;
    m)  modules=true
        ;;
    n)  node=true
        ;;
    p)  pull=true
        ;;
    s)  sync=true
        ;;
    r)  restart=true
        ;;
    t)  tldr=true
        ;;
    u)  update=true
        ;;
    v)  vim=true
        ;;
    w)  _wait=true
        ;;
    x)  plugins=true
        ;;
    y)  pip=true
        ;;
    z)  fish=true
        ;;
    C)  clean=false
        ;;
    D)  diff=false
        ;;
    F)  pacdiff=false
        ;;
    I)  install=false
        ;;
    M)  modules=false
        ;;
    N)  node=false
        ;;
    P)  pull=false
        ;;
    R)  restart=false
        ;;
    S)  sync=false
        ;;
    T)  tldr=false
        ;;
    U)  update=false
        ;;
    V)  vim=false
        ;;
    W)  _wait=false
        ;;
    X)  plugins=false
        ;;
    Y)  pip=false
        ;;
    Z)  fish=false
        ;;
    esac
done

O="$(mktemp --tmpdir "${USER}-update-out.XXXXXXXX")"
E="$(mktemp --tmpdir "${USER}-update-err.XXXXXXXX")"

shift $((OPTIND-1))

[ "$1" = "--" ] && shift

### PARSING END ###

function _exit ( ) {
  rm -f "$O" "$E"
  if $_wait ; then
    read -r
  fi
  exit "$1"
}

function _do ( ) {
  "$@" 1>"$O" 2>"$E"
  _check "$?" _do "$@"
}

function _do_fg ( ) {
  "$@"
  rm -f "$O" "$E"
  _check "$?" _do_fg "$@"
}

function _check ( ) {

  if [ "$1" -ne 0 ] ; then
    echo '! NONZERO RETURN CODE'
    echo ' > There was an error!'
    >&1 cat "$O"
    >&2 cat "$E"

    echo    ' Q: Do you want to try again? [yes/no/skip]'
    echo -n ' A: '
    read -r reply

    case "$reply" in
      yes)
        shift
        "$@"
        ;;
      skip)
        echo ' > skipping'
        ;;
      *)
        _exit "$1"
        ;;
    esac

  fi

}

function _trap ( ) {
  echo '! TRAP'
  echo ' > There was an error!'
  _exit 70;
}

trap _trap SIGHUP SIGINT SIGTERM

echo '+ Looking up dotfiles'
DOTFILES="$(cat "$HOME/.config/dotfiles/location")"
PLUGINS="$HOME/.config/dotfiles/plugins"

if [ "$DOTFILES" = '' ] ; then
  echo '! Could not find dotfiles :('
  echo ' > Try running boostrap/dotfiles-update in the dotfiles directory!'
  echo ' > The update script should find the dotfiles after that :)'
  _exit 58
fi

echo ' * dotfiles @ '"$DOTFILES"

echo '+ Go to dotfiles'
_do cd "$DOTFILES"

if $pull ; then

  echo '+ Stash local changes'
  git stash || true

  echo '+ Pull dotfiles'
  _do git pull

  echo '+ Apply local changes'
  git stash pop || true

fi

if $modules ; then

  echo '+ Pull submodules'
  _do git submodule foreach "(git checkout master; git pull)"

fi

if $clean ; then

  echo '+ Clean up old software'
  sudo sh "$DOTFILES"/bootstrap/clean || _exit "$?"

fi

if $sync ; then

  echo '+ Update already installed software'

  echo " * arch & aur (using trizen)"
  env PATH="$DOTFILES/.config/mock/ninja/j1:$PATH" trizen --noconfirm --noedit -Syu || _exit "$?"
  if command -v audit-fetch >/dev/null ; then audit-fetch ; fi

  if $node ; then
    echo " * node"
    bash "$DOTFILES"/bootstrap/update-node u || _exit "$?"
  fi

  if $pip ; then
    echo " * pip"
    sudo sh "$DOTFILES"/bootstrap/update-pip u || _exit "$?"
  fi

fi

if $install ; then

  echo '+ Install new software'

  echo " * base"
  sudo sh "$DOTFILES"/bootstrap/install-base || _exit "$?"

  echo " * arch"
  sudo sh "$DOTFILES"/bootstrap/install-arch || _exit "$?"
  if command -v audit-fetch >/dev/null ; then audit-fetch ; fi

  echo " * aur"
  sh "$DOTFILES"/bootstrap/install-aur || _exit "$?"

  if $node ; then
    echo " * node"
    bash "$DOTFILES"/bootstrap/update-node i || _exit "$?"
  fi

  if $pip ; then
    echo " * pip"
    sudo sh "$DOTFILES"/bootstrap/update-pip i || _exit "$?"
  fi

fi

if $restart ; then

  echo '+ Shutting down services'
  _do services.list.custom | services.off

fi

if $diff ; then

  echo '+ Diff dotfiles'
  sh "$DOTFILES"/bootstrap/dotfiles-diff || _exit "$?"

fi

if $update ; then

  echo '+ Update dotfiles'
  sh "$DOTFILES"/bootstrap/dotfiles-update -f || _exit "$?"

fi

if $plugins ; then

  if [ -d "$PLUGINS" ] ; then
    echo '+ Plugins @ '"$PLUGINS"' :)'

    if $pull ; then
      echo ' * Pulling all plugins'
      echo '  ° Go to '"$PLUGINS"
      _do cd "$PLUGINS"
      _do_fg env GEEZ_SYMLINK_DEPTH=1 GEEZ_HIDDEN_DEPTH=1 geez catchup
    fi

    find "$PLUGINS" -type f,l -printf '%f\n' |
    while read -r plugin ; do
      PLUGIN="$PLUGINS/$plugin"
      echo " * Plugin $plugin @ $PLUGIN"
      echo '  ° Go to '"$PLUGIN"
      _do cd "$PLUGIN"

      CHEZMOIIGNORE="${PLUGIN}/.chezmoiignore"

      if $diff ; then
        DIFFER="$PLUGIN"/dotfiles.diff
        if [ -e "$CHEZMOIIGNORE" ] ; then
          echo "  ° Diff ${PLUGIN} (chezmoi)"
          chezmoi --source "$(readlink -f "$PLUGIN")" diff
        elif [ -x "$DIFFER" ] ; then
          echo "  ° Diff ${PLUGIN} (${DIFFER})"
          "$DIFFER" || _exit "$?"
        fi
      fi

      if $update ; then
        UPDATER="$PLUGIN"/dotfiles.update
        if [ -e "$CHEZMOIIGNORE" ] ; then
          echo "  ° Update ${PLUGIN} (chezmoi)"
          chezmoi --source "$(readlink -f "$PLUGIN")" apply --force
        elif [ -x "$UPDATER" ] ; then
          echo "  ° Update ${PLUGIN} (${UPDATER})"
          "$UPDATER" -f || _exit "$?"
        fi
      fi

    done

  else
    echo '+ No plugins @ '"$PLUGINS"' :('
  fi

fi

if $restart ; then

  echo '+ Enable ntpd'
  _do sudo systemctl enable --now ntpd # clock sync
  echo '+ Enable atd'
  _do sudo systemctl enable --now atd # at program
  echo '+ Enable devmon'
  _do sudo systemctl enable --now devmon@"$USER" # auto mount usb drives program
  echo '+ Enable setup-environment'
  _do systemctl --user enable setup-environment # setup env variables at login
  echo '+ Enable vulnerabilities.timer'
  _do systemctl --user enable vulnerabilities.timer # poll for security fixes

  echo '+ Restarting services'
  _do services.on

fi

if $vim ; then

  echo '+ Update vim plugins'
  vim.update || _exit "$?"

fi

if $fish ; then

  echo '+ Update fish plugins'
  fish -c 'fisher update' || _exit "$?"

fi

if $tldr ; then

  echo '+ Update tldr cache'
  tldr --update || _exit "$?"

fi

if $pacdiff ; then

  echo '+ Running pacdiff'
  sudo pacdiff -f -o
  # See
  # https://stackoverflow.com/questions/2019281/load-different-colorscheme-when-using-vimdiff
  # https://stackoverflow.com/a/27809708/1582182
  # https://stackoverflow.com/a/49061325/1582182 <- THE REAL CULPRIT
  DIFFPROG='vim -c "syntax off" -d' sudo pacdiff

fi

if $_wait ; then
  echo '+ Done!'
fi

_exit 0
