#!/usr/bin/env bash

# based on https://github.com/tartley/rerun2
# USAGE:
#
#   rerun COMMAND
#
# Reruns COMMAND on every filesystem modify/create/delete event in the current
# directory. Useful for things like running tests whenever you hit 'save' in
# your editor.
#
# COMMAND is evaluated by Bash before it gets passed to rerun. To prevent this
# you must quote or escape things.
#
# Rerun does not implicitly re-evaluate the command on every iteration, it just
# executes it.
#
# Hence, if a command consists of more than "EXE arg1 arg2 ...", i.e. you need
# Bash to evaluate the command before executing it, e.g. it is a compound
# command featuring things like ';' or '&&' or '|', then you need to explicitly
# execute your command in a subshell that will do this evaluation. For example,
# I frequently like to clear the screen then run tests:
#
#   clear; python -m unittest discover
#
# you cannot pass this to 'rerun' directly, because the compound nature of the
# command needs a shell to interpret it. Hence you must:
#
#   rerun sh -c "clear; python -m unittest discover"
#
# Rerun will execute the whole "sh -c "..."" command on every iteration.
# and 'sh', when invoked, will interpret the compound command
# it has been given. ("clear; python...")
#
# For some reason 'rerun' doesn't currently work if COMMAND contains shell
# aliases. It thought it would work if rerun were sourced using a preceding dot:
#
#   . rerun COMMAND
#
# But it doesn't. If anyone knows how to fix this I'd love to hear about it.
#
# Some test cases:
#
#   rerun ls "some file" # Used to fail in early versions of rerun.
#
#   rerun ls some* # Used to fail in early versions of rerun,
#                  # due to spaces in matching filenames.
#
#   rerun date # Should update the displayed date on every iteration.
#
# TODO: I can't get shell aliases to work. :-( e.g: $ rerun ll ll: Command not
# found $ . rerun ll ll: Command not found
#
# TODO: We currently ignore './.git' directories. I should add the others.
# Can the user specify their own regexes?

i=0
files=()
while [ "$1" != '-c' ] && [ "$#" -gt 0 ] ; do
	files[i]="$1"
	i=$((i+1))
	shift
done
shift

i=0
cmd=()
while [ "$#" -gt 0 ] ; do
	cmd[i]="$1"
	i=$((i+1))
	shift
done

if [ "${#files[@]}" -eq 0 ] ; then
	files[0]="."
fi

if [ "${#cmd[@]}" -eq 0 ] ; then
	function handler() {
		echo "NOP"
	}
else
	function handler() {
		echo "${cmd[@]}"
		"${cmd[@]}"
	}
fi

function waitforevent() {

	# vim generates a 4913 file

	inotifywait --recursive --monitor --format "%w%f" \
		--event close_write --event move --event create --event delete \
		--exclude '(/\.git/|/4913$)' \
		"${files[@]}" | \
		git check-ignore --verbose --non-matching --stdin | \
		grep --line-buffered --max-count 1  --regexp '^::'

}

while true; do
	handler
	waitforevent
done
