#!/usr/bin/env python3

from argparse import ArgumentParser, BooleanOptionalAction
from subprocess import call
from sys import argv


css_variables = {
  'fn': 'font',
  'nb': 'normal background',
  'nf': 'normal foreground',
  'sb': 'selected background',
  'sf': 'selected foreground',
  'l': 'number of lines'
}

if __name__ == '__main__':

  parser = ArgumentParser()
  for key, value in css_variables.items():
    parser.add_argument('-{}'.format(key), help=value)

  parser.add_argument('-show', help='rofi\'s -show option')
  parser.add_argument('-t', help='match filter words separately', dest="tokenize", action="store_true")
  parser.add_argument('-tokenize', help='match filter words separately', action="store_true")
  parser.add_argument('-z', help='fuzzy matching', dest="matching", action="store_const", const="fuzzy")
  parser.add_argument('-matching', help='rofi\'s -matching option', default="normal")

  parser.add_argument('-sort', help='rofi\'s -sort/-no-sort option', action=BooleanOptionalAction, default=True)
  parser.add_argument('-sorting-method', help='rofi\'s -sorting-method option', default="fzf")

  parser.add_argument('-fullscreen', help='display menu in fullscreen', action="store_true")
  parser.add_argument('-mask', help='mask input', action="store_true")

  args, rest = parser.parse_known_intermixed_args(argv[1:])
  kw = vars(args)

  css_variable_defs = ''.join([
    '{}: {};'.format(key, value) for key in css_variables if (value := kw.get(key)) is not None
  ])

  theme_str = '* {{{}}}'.format(css_variable_defs)
  location = '2' if args.fullscreen else None

  cmd: tuple[str] = (
    'rofi',
    *(('-dmenu',) if args.show is None else ('-show', args.show)),
    '-theme',
    'fullscreen' if args.fullscreen else 'oneline' if args.l is None else 'multiline',
    *(('-location', location) if location is not None else ()),
    '-theme-str',
    theme_str,
    *(('-matching', args.matching) if args.matching is not None else ()),
    *(('-t',) if args.tokenize else ()),
    *(('-password',) if args.mask else ()),
    '-sort' if args.sort else '-no-sort',
    '-sorting-method', args.sorting_method,
    *rest
  )

  call(cmd)
