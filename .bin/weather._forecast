#!/usr/bin/env python3

import sys
import os
import subprocess
import json
from datetime import datetime, timedelta
import human
import math

HALFHOUR = 60 * 60 // 2

log = lambda *x, **y: print(*x, **y, file=sys.stderr)

CACHE = os.path.expanduser('~/.cache/weather/{}')

try:

    GEOLOCATION = json.loads(subprocess.check_output(
        ['memoize-get', '1800', 'geolocation.fetch']).decode())

    LATITUDE, LONGITUDE = GEOLOCATION['latitude'], GEOLOCATION['longitude']

except Exception as err:

    log('could not load geolocation')
    raise err

with open(CACHE.format('cache')) as fd:

    data = json.load(fd)


def distance_on_unit_sphere(lat1, long1, lat2, long2):
    '''
        from http://www.johndcook.com/blog/python_longitude_latitude/
    '''

    # Convert latitude and longitude to
    # spherical coordinates in radians.
    degrees_to_radians = math.pi / 180.0

    # phi = 90 - latitude
    phi1 = (90.0 - lat1) * degrees_to_radians
    phi2 = (90.0 - lat2) * degrees_to_radians

    # theta = longitude
    theta1 = long1 * degrees_to_radians
    theta2 = long2 * degrees_to_radians

    # Compute spherical distance from spherical coordinates.

    # For two locations in spherical coordinates
    # (1, theta, phi) and (1, theta', phi')
    # cosine( arc length ) =
    #    sin phi sin phi' cos(theta-theta') + cos phi cos phi'
    # distance = rho * arc length

    cos = (math.sin(phi1) * math.sin(phi2) * math.cos(theta1 - theta2) +
           math.cos(phi1) * math.cos(phi2))
    if cos > 1:
        cos = 1
    if cos < -1:
        cos = -1
    arc = math.acos(cos)

    # Remember to multiply arc by the radius of the earth
    # in your favorite set of units to get length.
    return arc


def km(*args):

    radius_km = 6373

    return distance_on_unit_sphere(*args) * radius_km

current = LATITUDE, LONGITUDE
old = data['latitude'], data['longitude']
threshold = 100
if km(*current, *old) > threshold:

    log('weather cache data is not usable:')
    log('> {} is more than {} km away from {}'.format(current, threshold, old))
    sys.exit(1)


NOW = datetime.now()

if 'daily' in data:
    daily = data['daily']['data']
else:
    daily = []

if 'hourly' in data:
    hourly = data['hourly']['data']
else:
    hourly = []


def ftoc(c):
    return (c - 32) * 5 / 9


def itom(i):
    return i * 25.4


YELLOW = '\033[33m'
LIGHTGRAY = '\033[37m'
DARKGRAY = '\033[90m'
RED = '\033[91m'
BRIGHTYELLOW = '\033[93m'
BLUE = '\033[94m'
WHITE = '\033[97m'
BOLD = '\033[1m'
UNDERLINE = '\033[4m'
ENDC = '\033[0m'

icons = {
    "clear-day": ("", BRIGHTYELLOW),
    "clear-night": ("", YELLOW),
    "rain": ("☔", BLUE),
    "snow": ("❄", LIGHTGRAY),
    "sleet": ("❅", LIGHTGRAY),
    "wind": ("", LIGHTGRAY),
    "fog": ("☁", DARKGRAY),
    "cloudy": ("", DARKGRAY),
    "partly-cloudy-day": ("☀☁", LIGHTGRAY),
    "partly-cloudy-night": ("☁", LIGHTGRAY),
    "hail": ("☄", LIGHTGRAY),
    "thunderstorm": ("", DARKGRAY),
    "tornado": ("", DARKGRAY),
}

print()
print( ' > Generated on {}'.format(NOW.strftime('%a, %d %b %Y %H:%M:%S %z')) )
print( ' >  lat {latitude} lon {longitude} tz {timezone}'.format(**data) )

print( """
 > About precipitation intensity
 ===============================
 > A very rough guide is that a value of
 > 0 mm/h corresponds to no precipitation,
 > 0.05 mm/h corresponds to very light precipitation,
 > 0.4  mm/h corresponds to light precipitation,
 > 2.5 mm/h corresponds to moderate precipitation,
 > and 10 mm/h corresponds to heavy precipitation. """)

DISPLAYED_TEMPERATURE = 'apparentTemperature'
# DISPLAYED_TEMPERATURE = 'temperature'

for day in daily:

    daytime = datetime.fromisoformat(day['time']).astimezone()
    sunrise = datetime.fromisoformat(day['sunriseTime']).astimezone().strftime('%H:%M:%S')
    sunset = datetime.fromisoformat(day['sunsetTime']).astimezone().strftime('%H:%M:%S')
    time = daytime

    t1 = round(ftoc(day[DISPLAYED_TEMPERATURE+'Min']))
    t2 = round(ftoc(day[DISPLAYED_TEMPERATURE+'Max']))
    p = round(100 * day['precipProbability'])
    i = round(itom(day['precipIntensity']), 1)

    fmt = '[{}]  {}  {} - {: >2}°C < {: >2}°C - {} {}'

    dtime = time.strftime('%A %d %B %Y')
    summary = day['summary']

    if p > 0:
        fmt = fmt + ' ({}% - {}mm/h)'

    iconname = day['icon']
    icon, color = icons.get(iconname, ("?", RED))
    fmt = color + fmt + ENDC

    if time < NOW + timedelta(hours=3):
        fmt = BOLD + fmt + ENDC

    fmt = UNDERLINE + fmt + ENDC

    print()
    print(fmt.format(dtime, sunrise, sunset, t1, t2, icon, summary, p, i))
    print()

    for hour in hourly:

        time = datetime.fromisoformat(hour['time']).astimezone()

        if time < daytime or time >= daytime + timedelta(days=1):
            continue

        t = round(ftoc(hour[DISPLAYED_TEMPERATURE]))
        p = round(100 * hour['precipProbability'])
        i = round(itom(hour['precipIntensity']), 1)

        fmt = ' * {} - {: >2}°C - {: <2} {} ({})'

        dtime = time.strftime('%I %p')
        htime = human.datetime(time)
        summary = hour['summary']

        if p > 0:
            fmt = fmt + ' ({}% - {}mm/h)'

        iconname = hour['icon']
        icon, color = icons.get(iconname, ("?", RED))
        fmt = color + fmt + ENDC

        if time < NOW + timedelta(hours=3):
            fmt = BOLD + fmt + ENDC

        print(fmt.format(dtime, t, icon, summary, htime, p, i))
