#!/usr/bin/env bash

MEMOIZE_CACHE="/tmp/${USER}-memoize"
GET="curl -s"

QUERY='select(.subject.type == "PullRequest") | {"id":.id, "pr":.subject.url, "title":.subject.title, "updated_at":.updated_at}'

declare -A filters

while true ; do
	filter="$1"
	if ! shift; then
		break
	fi
	filters[$filter]="$filter"
done

hasError () {
	<<< "$1" jq -e '.message != null' > /dev/null
}

passes () {
	pr="$1"
	filter="$2"
	updated_at="$3"
	# shellcheck disable=SC2086
	last_fetched_path="${MEMOIZE_CACHE}/$(memoize-args-key $GET "$pr")/T"

	validity="-1" # Defaults to immediate refetch
	if [ -e "$last_fetched_path" ] ; then
		last_updated="$(date --date "$updated_at" +%s)"
		last_fetched="$(cat "$last_fetched_path")"
		if [ "$last_fetched" -ge "$last_updated" ] ; then
			# shellcheck disable=SC2086
			if hasError "$(MEMOIZE_CACHE="$MEMOIZE_CACHE" memoize-get -1 $GET "$pr")" ; then
				# There was an error with the last fetch
				validity="25200" # 7 hours
			else
				# There was no error with the last fetch
				validity="864000" # 10 days
			fi
		fi
	fi

	# shellcheck disable=SC2086
	state="$(MEMOIZE_CACHE="$MEMOIZE_CACHE" memoize "$validity" $GET "$pr")"

	if hasError "$state" ; then
		>&2 printf 'Error while fetching PR (%s): %s\n' "$pr" "$(<<< "$state" jq -r .message)"
		return 2
	fi

	if [ "$(<<< "$state" jq "$filter")" = "false" ] ; then
		return 1
	else
		return 0
	fi
}

github.notifications |
jq -c "$QUERY" |
while read -r line ; do
	{ read -r id; read -r pr; read -r title; read -r updated_at; } <<< "$(printf '%s' "$line" | jq -r '.id,.pr,.title,.updated_at')"

	for filter in "${!filters[@]}"; do
		passes "$pr" "$filter" "$updated_at"
		rc="$?"
		if [ "$rc" -ne 0 ] ; then
			if [ "$rc" -eq 1 ] ; then
				# shellcheck disable=SC2016
				>&2 printf 'Not marking #%s as read: %s (%s) because it does not satisfy filter `%s`\n' "$id" "$title" "$pr" "$filter"
			else
				>&2 printf 'Not marking #%s as read: %s (%s) because of API error\n' "$id" "$title" "$pr"
			fi
			continue 2
		fi
	done

	>&2 printf 'Marking thread #%s as read: %s (%s)\n' "$id" "$title" "$pr"
	github.mark_as_read "$id"
done
