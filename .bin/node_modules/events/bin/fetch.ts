#!/usr/bin/env node

import fs from 'fs/promises';
import path from 'path';
import ICAL from 'ical.js';
import {
	log,
	CACHE,
	calendars,
	urlHash,
	dropAlarms
} from '../lib/events';

const _validate = (text: string) => {
	const jcalData = ICAL.parse(text);
	new ICAL.Component(jcalData);
};

await fs.mkdir(path.dirname(CACHE), { recursive: true });

for (const calendar of await calendars()) {
	const url = calendar.url;

	try {
		log(`downloading ${url}`);

		const response = await fetch(url, {
			headers: {
				'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.47 Safari/537.36'
			}
		});

		if (!response.ok) {
			throw new Error(`HTTP error! status: ${response.status}`);
		}

		let text = await response.text()
			.then(dropAlarms);

		_validate(text);

		const h = urlHash(url);
		const filename = CACHE.replace('{}', h);

		log(`writing ${url} to ${filename}`);

		await fs.writeFile(filename, text, 'utf8');

	} catch (err) {
		if (err instanceof Error) {
			if (err.name === 'AbortError') {
				log(`Fetch aborted for url: ${url}`);
			} else {
				log(`Error processing ${url}: ${err.message}`);
			}
		}

		log(err);
	}
}
