#!/usr/bin/env bash

# adapted from https://github.com/pimterry/notes

# Default Date string before config
QUICKNOTE_FORMAT="quicknote-%Y-%m-%d"
DEFAULT_EXT="md"
CONFIG="${HOME}/.config/notes/config"
# Look for configuration file at ~/.config/notes/config and use it
if [ -f "$CONFIG" ]; then
    # shellcheck disable=SC1090
    . "$CONFIG"
fi

configured_dir=${NOTES_DIRECTORY%/} # Remove trailing slashes
notes_dir="${configured_dir:-$HOME/notes}"
escaped_notes_dir="$(printf '%s' "$notes_dir" | sed -e 's/[]\/$*.^|[]/\\&/g')"

# Make sure the notes directory actually exists, and create it if it doesn't
if ! mkdir -p "$notes_dir"; then
    echo "Could not create directory $notes_dir, please update your \$NOTES_DIRECTORY" >&2
    exit 1
fi

# If no $EDITOR, look for `editor` (symlink on debian/ubuntu/etc)
if [ -z "$EDITOR" ] && type editor &>/dev/null; then
    EDITOR=editor
fi

without_notes_dir() {
    cat | sed -e "s/^$escaped_notes_dir//g" | sed -E "s/^\/+//g"
}

FIND_FILTER=(-not -path '*/\.*' -type f)

_find_notes() {
    local root="$1" && shift
    find "$root" "${FIND_FILTER[@]}" "$@"
}

ls_notes() {
    local ls_output
    ls_output=$(cd "$notes_dir" && ls "$@")
    local ls_result=$?

    local formatted_output
    formatted_output=$(printf '%s' "$ls_output" | without_notes_dir)

    if [[ $ls_result == 0 && "$formatted_output" ]]; then
        printf "%s\n" "$formatted_output"
        return 0
    else
        return 2
    fi
}

find_notes() {
    local find_output
    find_output=$(_find_notes "$notes_dir" -ipath "$notes_dir/*$**" 2>&1)
    local find_result=$?
    local formatted_output
    formatted_output=$(printf '%s' "$find_output" | without_notes_dir)

    if [[ $find_result == 0 && "$formatted_output" ]]; then
        printf "%s\n" "$formatted_output"
        return 0
    else
        return 2
    fi
}

grep_notes() {
    if [ ! "$#" -gt 0 ]; then
        printf "Grep requires a pattern, but none was provided."
        return 1
    fi

    local grep_output
    grep_output=$(grep -r --exclude-dir='.*' --exclude='.*' "$notes_dir" -li -e "$*" 2>&1)
    local grep_result=$?
    local formatted_output
    formatted_output=$(printf '%s' "$grep_output" | without_notes_dir)

    if [[ $grep_result == 0 && "$formatted_output" ]]; then
        printf "%s\n" "$formatted_output"
        return 0
    else
        return 2
    fi
}

search_filenames_and_contents() {
    if [ "$#" -gt 0 ]; then
      formatted_output="$({ find_notes "$@" ; grep_notes "$@" ; })"
    else
      formatted_output="$(find_notes)"
    fi
    if [ "$formatted_output" != '' ] ; then
        sort <<< "$formatted_output" | uniq
        return 0
    else
        return 2
    fi
}

generate_name() {
    local append_num=0
    local format_string
    format_string="$(date "+$QUICKNOTE_FORMAT")"
    # Initial test has no append
    local resolved_name=$format_string
    while [[ -e "$notes_dir/$resolved_name.$DEFAULT_EXT" ]]
    do
        append_num=$((append_num+1))
        resolved_name=$format_string.$append_num
    done
    printf '%s' "$resolved_name"
}

new_note() {
    local note_name="$*"
    if [[ $note_name == "" ]]; then
         note_name="$(generate_name)"
    fi

    if <<< "$note_name" grep -q "/$" ; then
        note_name="${note_name}/$(generate_name)"
    fi

    mkdir -p "$(dirname "$notes_dir/$note_name")"

    open_note "$note_name"
}

remove_note() {
    pushd "$notes_dir" > /dev/null || exit
    rm -i "$@"
    popd > /dev/null || exit
}

trash_note() {
    pushd "$notes_dir" > /dev/null || exit
    trash-put -v "$@"
    popd > /dev/null || exit
}

handle_multiple_notes() {
    local cmd=$1

    if [[ -p /dev/stdin ]]; then
        read -r -d'\n' note_names
        while read -r note_name; do
            "${cmd}_note" "$note_name"
        done <<< "$note_names"
    else
        "${cmd}_note" "${@:2}"
    fi
}

get_full_note_path() {
    local note_path=$1

    if [[ "$note_path" != *.* ]]; then
        note_path="$note_path.$DEFAULT_EXT"
    fi
    if [ ! -f "$note_path" ]; then
        note_path="$notes_dir/$note_path"
    fi

    echo "$note_path"
}

open_note() {
    local note_path=$1

    if [[ -z "$note_path" ]]; then
        open "$notes_dir"
        return
    fi

    if [ -z "$EDITOR" ]; then
        printf "Please set \$EDITOR to edit notes\n"
        exit 1
    fi

    note_path=$( get_full_note_path "$note_path" )

    #$EDITOR "$note_path" < /dev/tty
    $EDITOR "$note_path"

}

cat_note() {
    local note_path=$1

    if [[ -z "$note_path" ]]; then
        printf "Cat requires a name, but none was provided."
        exit 1
    fi

    note_path=$( get_full_note_path "$note_path" )

    cat "$note_path"
}

usage() {
  local name
  name="$(basename "$0")"
	cat <<EOF
${name} is a command line note taking tool.

Usage:
    ${name} new|n <name>                    # Create a new note
    ${name} ls [directory]                  # List notes by path
    ${name} find|f [pattern]                # Search notes by filename and path
    ${name} grep|g <pattern>                # Search notes by content
    ${name} search|s [pattern]              # Search notes by filename or content
    ${name} open|o                          # Open your notes directory
    ${name} open|o <name>                   # Open a note for editing by full name
    ${name} rm [-r | --recursive] <name>    # Remove note, or folder if -r or --recursive is given
    ${name} trash <name>                    # Trash note or folder
    ${name} cat <name>                      # Display note
    echo <name> | ${name} open|o            # Open all note filenames piped in
    echo <name> | ${name} cat               # Display all note filenames piped in
    ${name} --help                          # Print this usage information

'command|c' means you can use 'command' or the equivalent shorthand alias 'c'

Your notes directory is ${notes_dir}.
You can override this by setting \$NOTES_DIRECTORY in ${CONFIG} to your preferred path.
EOF
}

main() {
    local ret=0
    local cmd=""

    if [ -z "$1" ]; then
        printf "No command specified\n\n"
        usage
        exit 1
    fi

    case "$1" in
        "new"|"n" )
            cmd="new_note"
            ;;
        "ls" )
            cmd="ls_notes"
            ;;
        "search"|"s" )
            cmd="search_filenames_and_contents"
            ;;
        "find"|"f" )
            cmd="find_notes"
            ;;
        "grep"|"g" )
            cmd="grep_notes"
            ;;
        "open"|"o" )
            cmd="handle_multiple_notes open"
            ;;
        "rm" )
            cmd="remove_note"
            ;;
        "trash" )
            cmd="trash_note"
            ;;
        "cat" )
            cmd="handle_multiple_notes cat"
            ;;
        --help | -help | -h )
            cmd="usage"
            ;;
        * )
            printf "%s is not a recognized notes command.\n\n" "$1"
            cmd="usage"
            ret=1
            ;;
    esac
    shift

    $cmd "$@"
    ret=$((ret+$?))
    exit "$ret"
}
main "$@"

