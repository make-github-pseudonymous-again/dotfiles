#!/usr/bin/env python3

from zoneinfo import ZoneInfo
from datetime import datetime, timedelta
import re
import subprocess

TZ = subprocess.check_output(['timezone.current']).decode().strip()
FMT = '%Y-%m-%d %H:%M:%S'
REGEX_URL = 'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*(), ]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
EXCLUDED_URLS = [
    'https://g.co/calendar',
]

from events import _range
from events import _cache_load_url
from events import calendars
from events import FRESH
from events import _duration

def _icon(event):

    name = event.name.lower()

    if 'flight' in name:
        return ''

    elif 'train' in name or 'thalys' in name or 'sncf' in name:
        return ''

    elif 'dentist' in name or 'doctor' in name:
        return ''

    else:
        return icons[event]


allevents = set()
icons = {}

for _calendar in calendars():
    calendar_events = _cache_load_url(FRESH, _calendar['url'])
    allevents.update(calendar_events)
    for event in calendar_events:
        icons[event] = _calendar['icon']

def _add_months(dt: datetime, months: int) -> datetime:
    total_month = dt.month - 1 + months
    year  = dt.year + total_month // 12
    month = total_month % 12 + 1
    return dt.replace(year=year, month=month)

now = datetime.now(ZoneInfo(TZ))
today = now.replace(hour=0, minute=0, second=0, microsecond=0)
tomorrow = today + timedelta(days=1)
dayaftertomorrow = tomorrow + timedelta(days=1)
startofthisweek = today - timedelta(days=today.weekday())
nextweek = startofthisweek + timedelta(weeks=1)
weekafternextweek = nextweek + timedelta(weeks=1)
startofthismonth = today.replace(day=1)
nextmonth = _add_months(startofthismonth, 1)
monthafternextmonth = _add_months(nextmonth, 1)

_fresh = set(filter(lambda x: x.end >= now, allevents))

sections = []

timesections = [
    ["Past", None, today],
    ["Today", today, tomorrow],
    ["Tomorrow", tomorrow, dayaftertomorrow],
    ["Rest of week", dayaftertomorrow, nextweek],
    ["Next week", nextweek, weekafternextweek],
    ["Rest of month", weekafternextweek, nextmonth],
    ["Next month", nextmonth, monthafternextmonth],
    ["Future", monthafternextmonth, None],
]

used = set()

for name, begin, end in timesections:

    predicate = lambda x: (begin is None or x.begin >= begin) and (
        end is None or x.begin < end)

    events = set(filter(predicate, _fresh)) - used

    A = 'the beginning of the Universe' if begin is None else begin.strftime(FMT)
    B = 'the end of the Universe' if end is None else end.strftime(FMT)

    title = (name + ', from {} to {}').format(A, B)

    sections.append((title, events))

    used |= events

_happening = set(filter(lambda x: x.begin < now, _fresh))
_future = _fresh - _happening
_current = min(_happening, key=lambda x: x.end, default=None)
_next = min(_future, key=lambda x: x.begin, default=None)

_main = None

if _current is None:

    if _next is not None:

        _main = _next

else:

    _main = _current if _next is None or _next.begin >= _current.end else _next

BLUE = '\033[94m'
YELLOW = '\033[93m'
BOLD = '\033[1m'
UNDERLINE = '\033[4m'
ENDC = '\033[0m'


print()
print( ' > Generated on {}'.format(now.strftime('%a, %d %b %Y %H:%M:%S %Z')) )

for title, events in sections:

    if not events:
        continue

    print()
    print(UNDERLINE + title + ENDC)
    print()

    for event in sorted(events, key=lambda x: x.begin):

        name = event.name
        url = event.url
        location = event.location
        description = event.description
        begin = event.begin.to('local')
        end = event.end.to('local')

        # event format
        if begin >= now:
            ef = ' {icon}  {range} ({hbegin}) - {name}'
        else:
            ef = ' {icon}  (started {hbegin}, ends {hend}) - {name}'

        if location and location not in name:
            ef += ' ( {location})'

        urls = []

        if url:
            urls.append(url)

        if description and description not in name:
            match = re.findall(REGEX_URL, description)
            urls.extend(filter(lambda x: x not in EXCLUDED_URLS, match))

        if urls:
            # could use
            # https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda
            # instead
            ef += ' ( {urls[0]})'


        if _main is not None and event == _main:
            ef = UNDERLINE + ef + ENDC
        if _next is not None and event == _next:
            ef = YELLOW + ef + ENDC
        if _current is not None and event == _current:
            ef = BLUE + ef + ENDC
        if event in _happening:
            ef = BOLD + ef + ENDC

        line = ef.format(
            icon = _icon(event),
            hbegin = begin.humanize(),
            range = _range( now , begin , end ) ,
            hend = end.humanize( ) ,
            hduration = 'lasts ' +  _duration( begin , end ) ,
            name = name,
            location = location,
            urls = urls
        )

        line = line.replace('\r', '')
        line = line.replace('\n', ' ')

        print( line )
